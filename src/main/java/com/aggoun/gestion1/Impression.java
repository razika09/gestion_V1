/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aggoun.gestion1;

import com.aggoun.gestion1.DB.DataBase;
import com.itextpdf.text.DocumentException;
import java.awt.Color;
import java.awt.Component;
import java.awt.print.PrinterException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;

import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dual Computer
 */
public class Impression extends javax.swing.JFrame {

    /**
     * Creates new form Impression
     */
    DataBase db = new DataBase();
   
  
    public Impression() throws SQLException {
        initComponents();
         db.ConnectionToDataBase();
        parametre_table_impression();
       setLocationRelativeTo(null);
    }
     private void parametre_table_impression() throws SQLException{
        //jScrollPane1.getViewport().setBackground(Color.WHITE);
        CBX_PARTENAIRE.removeAllItems();
        db.getAllFournisseur(CBX_PARTENAIRE);
        
        DefaultTableCellRenderer centre = new DefaultTableCellRenderer();
        centre.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        for (int i=0;i<5;i++){
            TABLE_IMPRESSION.getColumnModel().getColumn(i).setCellRenderer(centre);
        } 
        TABLE_IMPRESSION.setRowHeight(20);
        TableColumnModel colummodel= TABLE_IMPRESSION.getColumnModel();
        colummodel.getColumn(0).setPreferredWidth(162);
        colummodel.getColumn(1).setPreferredWidth(40);
        colummodel.getColumn(2).setPreferredWidth(70);
        colummodel.getColumn(3).setPreferredWidth(40);
        colummodel.getColumn(4).setPreferredWidth(100);
       
        DefaultTableCellRenderer head = new DefaultTableCellRenderer();
        head.setHorizontalAlignment(JLabel.CENTER);
         head.setBackground(new Color(252,248,3));
        TABLE_IMPRESSION.getTableHeader().setDefaultRenderer(head);
        TABLE_IMPRESSION.setBackground(Color.WHITE);
        for (int i = 0; i < TABLE_IMPRESSION.getColumnCount(); i++) {
            TableColumn column = TABLE_IMPRESSION.getColumnModel().getColumn(i);
            column.setHeaderRenderer(new CustomTableHeaderRenderer(TABLE_IMPRESSION));
        }
      }
     
     public class CustomTableHeaderRenderer implements TableCellRenderer {
    DefaultTableCellRenderer renderer;

    public CustomTableHeaderRenderer(JTable table) {
        renderer = (DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        JLabel label = (JLabel) renderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        // Ajoutez des bordures internes à l'en-tête de la colonne
        label.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(Color.BLACK), // Bordure extérieure
            BorderFactory.createEmptyBorder(5, 5, 5, 5) // Marge interne
        ));

        return label;
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        LABEL_DATE_IMPRESSION = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TABLE_IMPRESSION = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        CBX_TYPE_OP = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        CBX_PARTENAIRE = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        SPIN_NUM_ACHAT_LIVR = new javax.swing.JSpinner();
        BTN_IMPRIMPER = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(598, 850));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Date :");

        LABEL_DATE_IMPRESSION.setBackground(new java.awt.Color(255, 255, 255));
        LABEL_DATE_IMPRESSION.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        LABEL_DATE_IMPRESSION.setForeground(new java.awt.Color(0, 0, 0));
        LABEL_DATE_IMPRESSION.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        TABLE_IMPRESSION.setBackground(new java.awt.Color(255, 255, 255));
        TABLE_IMPRESSION.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        TABLE_IMPRESSION.setForeground(new java.awt.Color(0, 0, 0));
        TABLE_IMPRESSION.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DESIGNATION", "UNITE", "PRIX/U", "QTE", "MONTANT"
            }
        ));
        TABLE_IMPRESSION.setShowGrid(true);
        TABLE_IMPRESSION.setShowHorizontalLines(false);
        TABLE_IMPRESSION.getTableHeader().setResizingAllowed(false);
        TABLE_IMPRESSION.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TABLE_IMPRESSION);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(LABEL_DATE_IMPRESSION, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(LABEL_DATE_IMPRESSION, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("type de bon :");

        CBX_TYPE_OP.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        CBX_TYPE_OP.setForeground(new java.awt.Color(0, 0, 0));
        CBX_TYPE_OP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "achat", "livraison" }));
        CBX_TYPE_OP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBX_TYPE_OPItemStateChanged(evt);
            }
        });
        CBX_TYPE_OP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBX_TYPE_OPActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Partenaire :");

        CBX_PARTENAIRE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBX_PARTENAIRE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBX_PARTENAIREItemStateChanged(evt);
            }
        });
        CBX_PARTENAIRE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBX_PARTENAIREActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Bon N° :");

        BTN_IMPRIMPER.setBackground(new java.awt.Color(0, 204, 255));
        BTN_IMPRIMPER.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        BTN_IMPRIMPER.setForeground(new java.awt.Color(0, 0, 0));
        BTN_IMPRIMPER.setText("Imprimer");
        BTN_IMPRIMPER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_IMPRIMPERActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SPIN_NUM_ACHAT_LIVR, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(BTN_IMPRIMPER)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CBX_TYPE_OP, 0, 164, Short.MAX_VALUE)
                            .addComponent(CBX_PARTENAIRE, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(CBX_TYPE_OP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(CBX_PARTENAIRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(SPIN_NUM_ACHAT_LIVR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(BTN_IMPRIMPER))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CBX_TYPE_OPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBX_TYPE_OPActionPerformed
        String type=CBX_TYPE_OP.getSelectedItem().toString();
        if ("achat".equals(type)) { // Vérifier si "num" est sélectionné
           
            try {
                CBX_PARTENAIRE.removeAllItems();
                db.getAllFournisseur(CBX_PARTENAIRE);
            } catch (SQLException ex) {
                Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if("livraison".equals(type)){
            
            try {
                CBX_PARTENAIRE.removeAllItems();
                db.getAllClient(CBX_PARTENAIRE);
            } catch (SQLException ex) {
                Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_CBX_TYPE_OPActionPerformed

    private void CBX_TYPE_OPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBX_TYPE_OPItemStateChanged
       String type=CBX_TYPE_OP.getSelectedItem().toString();
        if ("achat".equals(type)) { // Vérifier si "num" est sélectionné
           
            try {
                CBX_PARTENAIRE.removeAllItems();
                db.getAllFournisseur(CBX_PARTENAIRE);
            } catch (SQLException ex) {
                Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if("livraison".equals(type)){
            
            try {
                CBX_PARTENAIRE.removeAllItems();
                db.getAllClient(CBX_PARTENAIRE);
            } catch (SQLException ex) {
                Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_CBX_TYPE_OPItemStateChanged
   
    private void BTN_IMPRIMPERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_IMPRIMPERActionPerformed
       String type=CBX_TYPE_OP.getSelectedItem().toString();
        if ("livraison".equals(type)) { 
            Object client =CBX_PARTENAIRE.getSelectedItem();
            if(client != null){
               int value = (int) SPIN_NUM_ACHAT_LIVR.getValue();
                try {
                    String CNR_NIF_USER =db.getCNRandNIFuser();
                     String splituser[]=CNR_NIF_USER.split(" ");
                    String CNRuser = splituser[0];
                    String NIFuser = splituser[1];
                    String ADRESSEuser = db.getAdresseUser();
                    
                     String[] splitCli = client.toString().split(" ");
                    String nom = splitCli[0];
                    String prenom = splitCli[1];
                    int id = db.chercheIdClient(nom,prenom);
                    String CNR_NIF_CLIENT =db.getCNRandNIFclient(id);
                     String splitClient[]=CNR_NIF_CLIENT.split(" ");
                    String CNRclient = splitClient[0];
                    String NIFclient = splitClient[1];
                    db.allLivraisonImpression(TABLE_IMPRESSION, LABEL_DATE_IMPRESSION, client.toString(),value);
                    double tva = db.getTVAuser();
                    db.createAndShowPDF(client.toString(),value,ADRESSEuser,CNRuser,NIFuser,CNRclient,NIFclient,tva);
                } catch (SQLException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                } catch (DocumentException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                } catch (PrinterException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                }
        
            }    
        }else if ("achat".equals(type)) { 
            Object fourni =CBX_PARTENAIRE.getSelectedItem();
            if(fourni != null){
               int value = (int) SPIN_NUM_ACHAT_LIVR.getValue();
                try {
                    String CNR_NIF_USER =db.getCNRandNIFuser();
                     String splituser[]=CNR_NIF_USER.split(" ");
                    String CNRuser = splituser[0];
                    String NIFuser = splituser[1];
                    String ADRESSEuser = db.getAdresseUser();
                    
                     String[] splitFourni = fourni.toString().split(" ");
                    String produit = splitFourni[0];
                    String marque = splitFourni[1];
                    int id = db.chercheIdFournisseur(fourni.toString());
                    String CNR_NIF_FOURNI =db.getCNRandNIFfourni(id);
                     String splitF[]=CNR_NIF_FOURNI.split(" ");
                    String CNRfourni = splitF[0];
                    String NIFfourni = splitF[1];
                    db.allAchatImpression(TABLE_IMPRESSION, LABEL_DATE_IMPRESSION, fourni.toString(),value);
                    double tva = db.getTVAuser();
                    db.createAndShowPDFFourni(fourni.toString(),value,ADRESSEuser,CNRuser,NIFuser,CNRfourni,NIFfourni,tva);
                } catch (SQLException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                } catch (DocumentException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                } catch (PrinterException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                }
        
            }    
        
        }    
    }//GEN-LAST:event_BTN_IMPRIMPERActionPerformed

    private void CBX_PARTENAIREActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBX_PARTENAIREActionPerformed
        String type=CBX_TYPE_OP.getSelectedItem().toString();
        if ("livraison".equals(type)) { 
            Object client =CBX_PARTENAIRE.getSelectedItem();
            if(client != null){
               int value = (int) SPIN_NUM_ACHAT_LIVR.getValue();
                try {
                    String CNR_NIF_USER =db.getCNRandNIFuser();
                     String splituser[]=CNR_NIF_USER.split(" ");
                    String CNRuser = splituser[0];
                    String NIFuser = splituser[1];
                    String ADRESSEuser = db.getAdresseUser();
                    
                     String[] splitCli = client.toString().split(" ");
                    String nom = splitCli[0];
                    String prenom = splitCli[1];
                    int id = db.chercheIdClient(nom,prenom);
                    String CNR_NIF_CLIENT =db.getCNRandNIFclient(id);
                     String splitClient[]=CNR_NIF_CLIENT.split(" ");
                    String CNRclient = splitClient[0];
                    String NIFclient = splitClient[1];
                    db.allLivraisonImpression(TABLE_IMPRESSION, LABEL_DATE_IMPRESSION, client.toString(),value);
                    double tva = db.getTVAuser();
                    //db.createAndShowPDF(client.toString(),value,ADRESSEuser,CNRuser,NIFuser,CNRclient,NIFclient,tva);
                } catch (SQLException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                }
        
            }    
        }else if ("achat".equals(type)) { 
            Object fourni =CBX_PARTENAIRE.getSelectedItem();
            if(fourni != null){
               int value = (int) SPIN_NUM_ACHAT_LIVR.getValue();
                try {
                    String CNR_NIF_USER =db.getCNRandNIFuser();
                     String splituser[]=CNR_NIF_USER.split(" ");
                    String CNRuser = splituser[0];
                    String NIFuser = splituser[1];
                    String ADRESSEuser = db.getAdresseUser();
                    
                     String[] splitFourni = fourni.toString().split(" ");
                    String produit = splitFourni[0];
                    String marque = splitFourni[1];
                    int id = db.chercheIdFournisseur(fourni.toString());
                    String CNR_NIF_FOURNI =db.getCNRandNIFfourni(id);
                     String splitF[]=CNR_NIF_FOURNI.split(" ");
                    String CNRfourni = splitF[0];
                    String NIFfourni = splitF[1];
                    db.allAchatImpression(TABLE_IMPRESSION, LABEL_DATE_IMPRESSION, fourni.toString(),value);
                    double tva = db.getTVAuser();
                    //db.createAndShowPDFFourni(fourni.toString(),value,ADRESSEuser,CNRuser,NIFuser,CNRfourni,NIFfourni,tva);
                } catch (SQLException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                }
        
            }    
        
        } 
    }//GEN-LAST:event_CBX_PARTENAIREActionPerformed

    private void CBX_PARTENAIREItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBX_PARTENAIREItemStateChanged
        String type=CBX_TYPE_OP.getSelectedItem().toString();
        if ("livraison".equals(type)) { 
            Object client =CBX_PARTENAIRE.getSelectedItem();
            if(client != null){
               int value = (int) SPIN_NUM_ACHAT_LIVR.getValue();
                try {
                    String CNR_NIF_USER =db.getCNRandNIFuser();
                     String splituser[]=CNR_NIF_USER.split(" ");
                    String CNRuser = splituser[0];
                    String NIFuser = splituser[1];
                    String ADRESSEuser = db.getAdresseUser();
                    
                     String[] splitCli = client.toString().split(" ");
                    String nom = splitCli[0];
                    String prenom = splitCli[1];
                    int id = db.chercheIdClient(nom,prenom);
                    String CNR_NIF_CLIENT =db.getCNRandNIFclient(id);
                     String splitClient[]=CNR_NIF_CLIENT.split(" ");
                    String CNRclient = splitClient[0];
                    String NIFclient = splitClient[1];
                    db.allLivraisonImpression(TABLE_IMPRESSION, LABEL_DATE_IMPRESSION, client.toString(),value);
                    double tva = db.getTVAuser();
                    //db.createAndShowPDF(client.toString(),value,ADRESSEuser,CNRuser,NIFuser,CNRclient,NIFclient,tva);
                } catch (SQLException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                }
        
            }    
        }else if ("achat".equals(type)) { 
            Object fourni =CBX_PARTENAIRE.getSelectedItem();
            if(fourni != null){
               int value = (int) SPIN_NUM_ACHAT_LIVR.getValue();
                try {
                    String CNR_NIF_USER =db.getCNRandNIFuser();
                     String splituser[]=CNR_NIF_USER.split(" ");
                    String CNRuser = splituser[0];
                    String NIFuser = splituser[1];
                    String ADRESSEuser = db.getAdresseUser();
                    
                     String[] splitFourni = fourni.toString().split(" ");
                    String produit = splitFourni[0];
                    String marque = splitFourni[1];
                    int id = db.chercheIdFournisseur(fourni.toString());
                    String CNR_NIF_FOURNI =db.getCNRandNIFfourni(id);
                     String splitF[]=CNR_NIF_FOURNI.split(" ");
                    String CNRfourni = splitF[0];
                    String NIFfourni = splitF[1];
                    db.allAchatImpression(TABLE_IMPRESSION, LABEL_DATE_IMPRESSION, fourni.toString(),value);
                    double tva = db.getTVAuser();
                    //db.createAndShowPDFFourni(fourni.toString(),value,ADRESSEuser,CNRuser,NIFuser,CNRfourni,NIFfourni,tva);
                } catch (SQLException ex) {
                    Logger.getLogger(Impression.class.getName()).log(Level.SEVERE, null, ex);
                }
        
            }    
        
        }    
    }//GEN-LAST:event_CBX_PARTENAIREItemStateChanged

    /**
     * @param args the command line arguments
     */
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_IMPRIMPER;
    private javax.swing.JComboBox<String> CBX_PARTENAIRE;
    private javax.swing.JComboBox<String> CBX_TYPE_OP;
    private javax.swing.JLabel LABEL_DATE_IMPRESSION;
    private javax.swing.JSpinner SPIN_NUM_ACHAT_LIVR;
    private javax.swing.JTable TABLE_IMPRESSION;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
